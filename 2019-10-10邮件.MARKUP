### 批量操作

Django ORM 中的批量操作
Django ORM 中的批量操作
在Hibenate中，通过批量提交SQL操作，部分地实现了数据库的批量操作。但在Django的ORM中的批量操作却要完美得多，真是一个惊喜。

数据模型定义
首先，定义一个实例使用的django数据库模型Product，只是象征性地定义了两个字段name和price。

```
from django.db import models
class Product(models.Model):
    name = models.CharField(max_length=200)
    price = models.DecimalField(max_digits=10, decimal_places=2)
```

批量插入数据
批量插入数据时，只需先生成个一要传入的Product数据的列表，然后调用bulk_create方法一次性将列表中的数据插入数据库。

```
product_list_to_insert = list()
for x in range(10):
    product_list_to_insert.append(Product(name=‘product name ‘ + str(x), price=x))
Product.objects.bulk_create(product_list_to_insert)
```

批量更新数据
批量更新数据时，先进行数据过滤，然后再调用update方法进行一次性地更新。下面的语句将生成类似update...where...的SQL语句。

```
Product.objects.filter(name__contains=‘name‘).update(name=‘new name‘)
```

批量删除数据
批量更新数据时，先是进行数据过滤，然后再调用delete方法进行一次性地删除。下面的语句将生成类似delete from...where...的SQL语句。

```
Product.objects.filter(name__contains=‘name query‘).delete()
```

如果是通过运行普通Python脚本的方式而不是在view中调用上述的代码的，别忘了先在脚本中进行django的初始化：

```
import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")

import django
django.setup()
```

Hibernate的所谓“批量操作”中，对每一个实体的更新操作，都会生成一条update语句，然后只是把好几个update语句一次性提交给数据库服务器而已。对实体的删除操作也是一样。

Django ORM中的批量操作的实现更接近于SQL操作的体验，运行效率也会比Hibernate中的实现更加高效。

### django模型中外键操作

外键操作对应的时一对一多对多的关系，在定义时分用两个函数：

多对一： ForeignKey

多对多： ManyToManyField

拿什么是多对一和多对多呢，我们举例来说，比如现在我们有三个表，分别是书，作者，出版社。一本书只能有一个出版社，一个出版社可以出版很多书，那么书和出版社的关系就是多对一。而一本书可能有多个作者，一个作者也可以出版过多本书，这两者的关系就是多对多。在实际应用这这种关系比较常见，那么做数据处理的时候怎么处理呢？我们根据所说的内容先构建下面的模型：

```
from django.db import models

 

class Publisher(models.Model):

   name = models.CharField(max_length=30)

   address = models.CharField(max_length=50)

   city = models.CharField(max_length=60)

   state_province = models.CharField(max_length=30)

   country = models.CharField(max_length=50)

   website = models.URLField()

 

   def __unicode__(self):

       return self.name

 

class Author(models.Model):

   first_name = models.CharField(max_length=30)

   last_name = models.CharField(max_length=40)

   email = models.EmailField()

 

   def __unicode__(self):

       return u‘%s %s‘ % (self.first_name, self.last_name)

 

class Book(models.Model):

   title = models.CharField(max_length=100)

   authors = models.ManyToManyField(Author)

   publisher = models.ForeignKey(Publisher)

   publication_date = models.DateField()

   def __unicode__(self):

       return self.title
```

访问外键(Foreign Key)值

当你获取一个ForeignKey 字段时,你会得到相关的数据模型对象。例如:

```
b = Book.objects.get(id=50)

b.publisher

<Publisher: Apress Publishing>

b.publisher.website

u‘http://www.apress.com/‘
```

对于用`ForeignKey` 来定义的关系来说，在关系的另一端也能反向的追溯回来，只不过由于不对称性的关系而稍有不同。通过一个`publisher` 对象，直接获取 books ，用 publisher.book_set.all() ，如下：

```
>>> p =Publisher.objects.get(name=‘Apress Publishing‘)

>>> p.book_set.all()

[<Book: The Django Book>, <Book:Dive Into Python>, ...]
```

实际上，book_set 只是一个 QuerySet，所以它可以像QuerySet一样,能实现数据过滤和分切，例如：

```
p = Publisher.objects.get(name=‘ApressPublishing‘)

p.book_set.filter(name__icontains=‘django‘)

[<Book: The Django Book>, <Book:Pro Django>]
```

属性名称book_set是由模型名称的小写(如book)加_set组成的。这里说一下，在ForeignKey函数中有一个参数related_name，如果设置了这个参数就可以不用_set的形式了，可以直接用related_name的值，这一点同样适用于ManyToManyField函数。

访问多对多值(Many-to-Many Values)

多对多和外键工作方式相同，只不过我们处理的是QuerySet而不是模型实例。例如,这里是如何查看书籍的作者：

```
b = Book.objects.get(id=50)

b.authors.all()

[<Author: Adrian Holovaty>,<Author: Jacob Kaplan-Moss>]

b.authors.filter(first_name=‘Adrian‘)

[<Author: Adrian Holovaty>]

b.authors.filter(first_name=‘Adam‘)
```

反向查询也可以。要查看一个作者的所有书籍,使用author.book_set ,就如这样:

```
a = Author.objects.get(first_name=‘Adrian‘,last_name=‘Holovaty‘)

a.book_set.all()

[<Book: The Django Book>, <Book:Adrian‘s Other Book>]
```

这里,就像使用 ForeignKey字段一样，属性名book_set是在数据模型(model)名后追加_set。